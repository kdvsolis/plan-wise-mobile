@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.IdentityModel.Tokens.Jwt;

<script>
    window.isSmallScreen = function () {
        return window.matchMedia('(max-width: 992px)').matches;
    }
</script>

<CascadingParameter Name="token" Value="@token" />

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="uui-navbar07_logo-link w-nav-brand" href="/">
            <div class="uui-logo_component">
                <div class="uui-logo_logomark">
                    <img src="/images/logomark-bg.svg" loading="eager" alt="Untitled UI logomark" class="uui-styleguide_logomark-bg">
                    <div class="uui-logo_logomark-blur"></div>
                    <div class="uui-logo_logomark-dot"></div>
                </div>
                <p class="paragraph">Budget</p>
                <img src="/images/untitled-ui-logo.png" loading="lazy" alt="Logo" class="uui-logo_image">
            </div>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            @if (token == null)
            {
                <div class="d-flex right-menu uui-navbar07_button-wrapper" id="header-login-register">
                    <a href="/login" class="uui-button-tertiary-gray">Log in</a>
                    <a href="/registration" class="uui-button-4 w-inline-block">Sign up</a>
                </div>
            }
            @if (token != null)
            {
                <div class="d-flex right-menu uui-navbar07_button-wrapper mt-2" id="header-login-logout">
                    <button class="uui-button-4 w-inline-block" @onclick="HandleSignOut">Sign out</button>
                </div>
            }
        </div>
    </div>
</nav>

@code {
    [CascadingParameter]
    public string token { get; set; }

    [Parameter]
    public EventCallback<string> OnLogin { get; set; }

    private string UlStyle = null;
    private bool IsSmallScreen = false;

    protected override async Task OnParametersSetAsync()
    {
        token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        IsSmallScreen = await JSRuntime.InvokeAsync<bool>("isSmallScreen");
        UlStyle = $"visibility: {(token != null ? "visible" : IsSmallScreen ? "hidden; display: none; margin-top: 10px" : "hidden")}";
        if (string.IsNullOrEmpty(token))
        {
            token = null;
        }
        else
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            if (jwtToken.ValidTo < DateTime.UtcNow)
            {
                token = null;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            StateHasChanged();
        }
    }

    private async Task HandleLogin(string token)
    {
        this.token = token;
        StateHasChanged(); // Trigger a re-render
    }

    private async Task HandleSignOut()
    {
        // Remove the token from localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "token");

        // Navigate back to the login page
        NavigationManager.NavigateTo("/login");
    }
}